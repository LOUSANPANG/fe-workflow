export default (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q){return {data:{"content-query-BPukshCbqe":{_path:"\u002Fdocs\u002Fjs-css",_dir:"docs",_draft:g,_partial:g,_locale:"en",_empty:g,title:h,description:h,body:{type:"root",children:[{type:a,tag:"h1",props:{id:"js-css-代码优化"},children:[{type:b,value:"JS & CSS 代码优化"}]},{type:a,tag:i,props:{id:j},children:[{type:b,value:k}]},{type:a,tag:d,props:{id:l},children:[{type:b,value:l}]},{type:a,tag:e,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:"待添加元素 -\u003E 文档碎片 -\u003E 插入需要位置（减少 DOM 操作提高性能）。"}]}]},{type:a,tag:d,props:{id:"垃圾收集内存管理"},children:[{type:b,value:"垃圾收集、内存管理"}]},{type:a,tag:e,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:"堆内存无用数据值为 null。"}]},{type:a,tag:c,props:{},children:[{type:b,value:"栈内存占用取消。"}]},{type:a,tag:c,props:{},children:[{type:b,value:"避免内存泄漏（全局变量、闭包、DOM 元素的引用、定时器）。"}]}]},{type:a,tag:d,props:{id:"web-worker"},children:[{type:b,value:"Web Worker"}]},{type:a,tag:e,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:"有繁重计算的代码抽离到 Web Worker。"}]},{type:a,tag:c,props:{},children:[{type:b,value:"预先加载和存储一些数据。"}]},{type:a,tag:c,props:{},children:[{type:b,value:"使用 Comlink 来简化与 Web Worker 之间的通信。"}]}]},{type:a,tag:d,props:{id:"webassembly"},children:[{type:b,value:"WebAssembly"}]},{type:a,tag:e,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:"将繁重的计算任务抽离到 WebAssembly 执行。"}]}]},{type:a,tag:d,props:{id:m},children:[{type:b,value:m}]},{type:a,tag:d,props:{id:"代码覆盖率识别并删除未使用的-css-js并进行压缩"},children:[{type:b,value:"代码覆盖率识别并删除未使用的 CSS \u002F JS，并进行压缩"}]},{type:a,tag:e,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:"Chrome Coverage 查看覆盖率结果，使用 import() 延迟加载。"}]},{type:a,tag:c,props:{},children:[{type:b,value:"purgecss、UnCSS、Helium 检测 CSS 删除未使用的样式。"}]}]},{type:a,tag:d,props:{id:"脚步加载方式预热连接"},children:[{type:b,value:"脚步加载方式、预热连接"}]},{type:a,tag:e,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:"*使用 defer、async 的加载方式。"}]},{type:a,tag:c,props:{},children:[{type:b,value:"*使用 dns-prefetch 提示浏览器该资源需要在用户点击链接之前进行 DNS 查询和协议握手。"}]},{type:a,tag:c,props:{},children:[{type:b,value:"*使用 preconnect 提前建立连接。"}]},{type:a,tag:c,props:{},children:[{type:b,value:"使用 prefetch 提示浏览器，用户未来的浏览有可能需要加载目标资源，所以浏览器有可能通过事先获取和缓存对应资源，优化用户体验。"}]},{type:a,tag:c,props:{},children:[{type:b,value:"使用 preload 告诉浏览器下载资源，因为在当前导航期间稍后将需要该资源。"}]}]},{type:a,tag:d,props:{id:"intersectionobserver-延迟加载脚本-api"},children:[{type:b,value:"IntersectionObserver 延迟加载脚本 API"}]},{type:a,tag:e,props:{},children:[{type:a,tag:c,props:{},children:[]}]},{type:a,tag:i,props:{id:n},children:[{type:b,value:o}]},{type:a,tag:d,props:{id:"html-节点尽量少避免深层次嵌套结构"},children:[{type:b,value:"HTML 节点尽量少，避免深层次嵌套结构"}]},{type:a,tag:d,props:{id:"内联首屏关键-css"},children:[{type:b,value:"内联首屏关键 CSS"}]},{type:a,tag:e,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:"内联在页面的  标签中，从而减少往返请求传输。"}]},{type:a,tag:c,props:{},children:[{type:b,value:"由于在慢启动阶段 TCP 交换的包的大小有限，所以关键 CSS 的大小应该不超过14KB。"}]},{type:a,tag:c,props:{},children:[{type:b,value:"超出这个限制范围，浏览器将需要额外的传输往返用于获取更多样式。"}]}]},{type:a,tag:d,props:{id:"css-不同情况下的引用情况"},children:[{type:b,value:"CSS 不同情况下的引用情况"}]},{type:a,tag:e,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:"媒体查询条件把 CSS 文件进行拆分可能对我们的页面性能有一定提升（不同 media 适配，引入不同的 CSS 文件）。"}]},{type:a,tag:c,props:{},children:[{type:b,value:"避免在 CSS 文件中使用 @import，会影响浏览器的并行下载。"}]},{type:a,tag:c,props:{},children:[{type:b,value:"使用 scss、less 他们会将 @import 的文件直接包含在 CSS 中，并不会产生额外的 HTTP 请求。"}]}]},{type:a,tag:d,props:{id:p},children:[{type:b,value:p}]},{type:a,tag:e,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:"CSS 选择器的匹配是从右向左进行的。"}]},{type:a,tag:c,props:{},children:[{type:b,value:"嵌套的层级更多，匹配所要花费的时间代价自然更高。"}]},{type:a,tag:c,props:{},children:[{type:b,value:"通配符和属性选择器效率最低。"}]}]},{type:a,tag:d,props:{id:q},children:[{type:b,value:q}]},{type:a,tag:e,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:"始终在图像上设置宽度和高度属性，浏览器保留空间，后续图片资源加载完成后不需要回流。"}]},{type:a,tag:c,props:{},children:[{type:b,value:"避免多次修改 DOM 属性，批量修改 DOM。"}]},{type:a,tag:c,props:{},children:[{type:b,value:"脱离文档流：对于一些类似动画之类的频繁变更的 DOM.可以使用绝对定位将其脱离文档流，避免父元素频繁回流。"}]},{type:a,tag:c,props:{},children:[{type:b,value:"渲染层提升为合成层"},{type:a,tag:e,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:"合成层的位图，会交由 GPU 合成，比 CPU 处理要快得多。"}]},{type:a,tag:c,props:{},children:[{type:b,value:"当需要重绘时，只需要重绘本身，不会影响到其他的层。"}]},{type:a,tag:c,props:{},children:[{type:b,value:"元素提升为合成层后，transform 和 opacity 才不会触发重绘，如果不是合成层，则其依然会触发重绘。"}]}]}]}]},{type:a,tag:d,props:{id:"提升渲染性能的css属性"},children:[{type:b,value:"提升渲染性能的CSS属性"}]},{type:a,tag:e,props:{},children:[{type:a,tag:c,props:{},children:[{type:b,value:"content-visibility 控制一个元素是否渲染其内容，并且允许浏览器跳过这些元素的布局与渲染。"}]},{type:a,tag:c,props:{},children:[{type:b,value:"will-change 通知浏览器哪些元素和属性将会改变。"}]},{type:a,tag:c,props:{},children:[{type:b,value:"contain-intrinsic-size 指定的元素自然大小，确保我们未渲染子元素的 div 仍然占据空间。"}]}]}],toc:{title:"",searchDepth:f,depth:f,links:[{id:j,depth:f,text:k},{id:n,depth:f,text:o}]}},_type:"markdown",_id:"content:docs:72.js-css.md",_source:"content",_file:"docs\u002F72.js-css.md",_extension:"md"}},prerenderedAt:1678345226524}}("element","text","li","h4","ul",2,false,"JS & CSS代码优化","h2","javascript-代码方面","JavaScript 代码方面","使用文档碎片","虚拟列表","css-代码方面","CSS 代码方面","有选择地使用选择器","减少回流和重绘"))